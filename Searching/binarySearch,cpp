/******************************************************************************
Time : O(log(n)), O(nlog(n))
When to use: Sorted data, searching for a single element

*******************************************************************************/
#include <iostream>
#include <vector>
using namespace std;

// Never use this
int binarySearchUsingRecursion(vector<int> &arr, int start, int end, int key) {
    if (start <= end) {
        int middle = start + (end - start) / 2;
        if (arr[middle] == key) {
            return middle;
        } else if (key > arr[middle]) {
            return binarySearchUsingRecursion(arr, middle + 1, end, key);
        } else {
            return binarySearchUsingRecursion(arr, start, middle - 1, key);
        }
    }
    return -1;
}

// better to use this
void binarySearchUsingWhile(vector<int> &arr, int end, int key)
{
    int start = 0;
    while(start <= end)
    {
        int middle = start + (end - start) / 2;
        if(arr[middle] == key)
        {
            cout<<"Element fond at index: "<<middle;
            return;
        }
        else if (arr[middle] > key)
        {
            end = middle - 1;
        }
        else{
            start = middle + 1;
        }
    }
    cout<<"Element not in array";
    return;
}
int main() {
    vector<int> arr = {1, 2, 3, 4, 5};
    int n = arr.size();
    int key;

    cout << "Enter the key to search: ";
    cin >> key;

    int index = binarySearchUsingRecursion(arr, 0, n - 1, key);

    if (index == -1) {
        cout << "Element not in array." << endl;
    } else {
        cout << "Element found at index " << index << "." << endl;
    }
    
    binarySearchUsingWhile(arr, n - 1, key);

    return 0;
}